import Head from "next/head";
import Image from "next/image";
import custom from "../styles/custom.module.css";
import styles from "../styles/Home.module.css";
import { useState, useEffect, useRef } from "react";

export default function Home() {
  const [hiddenNumber, setHiddenNumber] = useState();
  const [randomNumber, setRandomNumber] = useState("?");
  const [userNumber, setUserNumber] = useState("");
  const [timesTried, setTimesTried] = useState(0);

  const lockedNumberRef = useRef();
  const userMessageRef = useRef();

  const [pcMessage, setPCMessage] = useState();
  const userMessages = {
    default: "gUeSS Da nUmBer!",
    correct: "Correct !",
    tooHigh: "tOo hIgH !",
    tooLow: "tOo looW !",
    noNumberGiven: "pLeAsE EnTEr A nuMBer!!",
    pcCorrect: "You were too lazy! PC Found the number instead!!",
  };

  const [userMessage, setUserMessage] = useState(userMessages.default);
  const initTrials = [];
  const [trialsStarter, setTrialsStarter] = useState(1);
  const [trials, setTrials] = useState([]);

  const generateRandomNumber = () => {
    const min = 0;
    const max = 100;
    setHiddenNumber(Math.floor(Math.random() * (max - min) + min));
  };

  const startPCGame = () => {
    console.log("startPCGame");

    for (let x = 0; x < 100; x++) {
      initTrials.push("Trying number " + x);
      if (x == hiddenNumber) {
        console.log("Found!: " + x + "===" + hiddenNumber);
        setTrials(initTrials);
        console.log(trials);
        setPCMessage("Number is: " + x);
        setRandomNumber(x);

        lockedNumberRef.current.style.background = "lightgreen";
        setUserMessage(userMessages.pcCorrect);
        userMessageRef.current.style.color = "green";
        return;
      }
    }
  };

  const restartGame = () => {
    console.log("Hello");
    // Generate a new random number
    generateRandomNumber();
    lockedNumberRef.current.style.background = "white";

    // Set Everything to null
    setRandomNumber("?");
    setUserNumber("");
    setTrials([]);
    setPCMessage([]);
    setUserMessage(userMessages.default);
    userMessageRef.current.style.color = "black";
  };

  const compareNumbers = () => {
    // console.log("userNumber: ", userNumber);
    console.log("hiddenNumber: ", hiddenNumber);

    // setTrials(counter);

    console.log("Times triedd: ", trialsStarter);
    if (userNumber == "" || userNumber == undefined) {
      // Notify
      console.log("Please Enter a number!");
      userMessageRef.current.style.color = "red";
      setUserMessage(userMessages.noNumberGiven);
    } else if (userNumber > hiddenNumber) {
      console.log("userNumber > randomNumber");
      userMessageRef.current.style.color = "salmon";
      setUserMessage(userMessages.tooHigh);
      // Notify User
    } else if (userNumber < hiddenNumber) {
      console.log("userNumber < hiddenNumber");
      userMessageRef.current.style.color = "orange";

      setUserMessage(userMessages.tooLow);
      // Notify User
    } else if (userNumber == hiddenNumber) {
      // Notify User

      setRandomNumber(hiddenNumber);

      lockedNumberRef.current.style.background = "lightgreen";
      setUserMessage(userMessages.correct);
      userMessageRef.current.style.color = "green";
      // lockedNumberRef.current.style.color = "white";
    }

    // setTrials(initTrials);
  };

  useEffect(() => {
    generateRandomNumber();
  }, []);

  const handleUserGuess = () => {
    setTimesTried(timesTried + 1);
    compareNumbers();
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Guessr</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={custom.master}>
        <div className={custom.column_left}>
          <h1 className={custom.history}>Guess History</h1>

          <div className={custom.content}>
            <div>
              {trials.map((p, index) => {
                return <p key={index}>{p}</p>;
              })}
            </div>
          </div>
        </div>

        <div className={custom.column_middle}>
          <main className={custom.main}>
            <p
              ref={userMessageRef}
              style={{ fontSize: "40px", marginTop: "10px" }}
            >
              <strong>{userMessage}</strong>
            </p>

            <div
              ref={lockedNumberRef}
              className={styles.card}
              style={{
                maxWidth: "100%",
                width: "100%",
                textAlign: "center",
                marginBottom: "40px",
                border: "4px dashed grey",
              }}
            >
              <h1>{randomNumber}</h1>
            </div>

            <input
              type="text"
              style={{
                width: "100%",
                height: "100px",
                marginBottom: "-12px",
                border: "none",
                outline: "none",
                fontSize: "30px",
                textAlign: "center",
                background: "lightyellow",
              }}
              value={userNumber}
              onChange={(e) => setUserNumber(e.target.value)}
            />

            <hr
              style={{
                border: "solid lightgrey 1px",
                width: "100%",
                marginBottom: "40px",
              }}
            />
            <div className={styles.grid}>
              <a
                href="#"
                onClick={(e) => handleUserGuess(userNumber)}
                className={styles.card}
                name="guess"
              >
                <h1 className="text-center">
                  <center>Guess</center>
                </h1>
              </a>
              <a href="#" onClick={restartGame} className={styles.card}>
                <h1 className="text-center">
                  <center>Restart</center>
                </h1>
              </a>
            </div>
          </main>
        </div>

        <div className={custom.column_right}>
          <h1 className={custom.options}>Options</h1>
          <div className={custom.button}>
            <button href="#" onClick={startPCGame}>
              <h1 className="text-center">
                <center>Start PC Game</center>
              </h1>
            </button>
          </div>
          <div className={custom.pc_message}>{pcMessage}</div>
        </div>
      </main>
    </div>
  );
}
